# Makevars for acediaR package
# Configures compilation of C++ and CUDA source files

# Detect R installation  
R_HOME = $(shell R RHOME)

# CUDA installation path
CUDA_HOME ?= /usr/local/cuda
CUDA_LIB_PATH = $(CUDA_HOME)/lib64

# C++ compiler flags (include Rcpp and kernels directory)
PKG_CPPFLAGS = -I$(R_HOME)/include -I$(CUDA_HOME)/include -Ikernels $(shell $(R_HOME)/bin/Rscript -e "Rcpp:::CxxFlags()") -D_FORTIFY_SOURCE=2 -fPIC

# Linker flags  
PKG_LIBS = -L$(R_HOME)/lib -lR -L$(CUDA_LIB_PATH) -lcudart -lcublas -lcurand $(shell $(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()")

# CUDA compiler and flags  
NVCC = $(CUDA_HOME)/bin/nvcc
NVCCFLAGS = -O3 -arch=sm_89 --ptxas-options=-v -c -Xcompiler -fPIC -Ikernels

# Define source and object files
CPP_SOURCES = $(wildcard *.cpp)
CPP_OBJECTS = $(CPP_SOURCES:.cpp=.o)

# CUDA sources in main src directory (only legacy ones if any)
CUDA_SOURCES = $(wildcard *.cu)
CUDA_OBJECTS = $(CUDA_SOURCES:.cu=.o)

# CUDA sources in kernels directory (compile every .cu so that additional kernels like tensor_slice_update.cu are included)
KERNEL_SOURCES = $(wildcard kernels/*.cu)
KERNEL_OBJECTS = $(KERNEL_SOURCES:.cu=.o)

# Automatically include all compiled C++ and CUDA object files
OBJECTS = $(CPP_OBJECTS) $(CUDA_OBJECTS) $(KERNEL_OBJECTS)

# Rules for CUDA compilation in main directory
%.o: %.cu
	$(NVCC) $(NVCCFLAGS) -I$(R_HOME)/include $< -o $@

# Rules for CUDA compilation in kernels directory
kernels/%.o: kernels/%.cu
	$(NVCC) $(NVCCFLAGS) -I$(R_HOME)/include $< -o $@

# Make sure all objects are built before creating shared library
$(SHLIB): $(OBJECTS) 