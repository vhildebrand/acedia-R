// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// as_gpuVector
SEXP as_gpuVector(NumericVector x);
RcppExport SEXP _acediaR_as_gpuVector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(as_gpuVector(x));
    return rcpp_result_gen;
END_RCPP
}
// as_vector_gpuVector
NumericVector as_vector_gpuVector(SEXP gpu_vec_ptr);
RcppExport SEXP _acediaR_as_vector_gpuVector(SEXP gpu_vec_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type gpu_vec_ptr(gpu_vec_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(as_vector_gpuVector(gpu_vec_ptr));
    return rcpp_result_gen;
END_RCPP
}
// gpu_add_rcpp
SEXP gpu_add_rcpp(SEXP a_ptr, SEXP b_ptr);
RcppExport SEXP _acediaR_gpu_add_rcpp(SEXP a_ptrSEXP, SEXP b_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type a_ptr(a_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b_ptr(b_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(gpu_add_rcpp(a_ptr, b_ptr));
    return rcpp_result_gen;
END_RCPP
}
// print_gpuVector
void print_gpuVector(SEXP gpu_vec_ptr);
RcppExport SEXP _acediaR_print_gpuVector(SEXP gpu_vec_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type gpu_vec_ptr(gpu_vec_ptrSEXP);
    print_gpuVector(gpu_vec_ptr);
    return R_NilValue;
END_RCPP
}
// gpuVector_size
size_t gpuVector_size(SEXP gpu_vec_ptr);
RcppExport SEXP _acediaR_gpuVector_size(SEXP gpu_vec_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type gpu_vec_ptr(gpu_vec_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(gpuVector_size(gpu_vec_ptr));
    return rcpp_result_gen;
END_RCPP
}
// gpuVector_empty
bool gpuVector_empty(SEXP gpu_vec_ptr);
RcppExport SEXP _acediaR_gpuVector_empty(SEXP gpu_vec_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type gpu_vec_ptr(gpu_vec_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(gpuVector_empty(gpu_vec_ptr));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP r_gpu_add(SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_acediaR_as_gpuVector", (DL_FUNC) &_acediaR_as_gpuVector, 1},
    {"_acediaR_as_vector_gpuVector", (DL_FUNC) &_acediaR_as_vector_gpuVector, 1},
    {"_acediaR_gpu_add_rcpp", (DL_FUNC) &_acediaR_gpu_add_rcpp, 2},
    {"_acediaR_print_gpuVector", (DL_FUNC) &_acediaR_print_gpuVector, 1},
    {"_acediaR_gpuVector_size", (DL_FUNC) &_acediaR_gpuVector_size, 1},
    {"_acediaR_gpuVector_empty", (DL_FUNC) &_acediaR_gpuVector_empty, 1},
    {"r_gpu_add", (DL_FUNC) &r_gpu_add, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_acediaR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
