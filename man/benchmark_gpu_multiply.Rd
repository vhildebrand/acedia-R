% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/benchmark-multiply.R
\name{benchmark_gpu_multiply}
\alias{benchmark_gpu_multiply}
\title{Benchmark GPU vs CPU Performance for Multiplication Operations}
\usage{
benchmark_gpu_multiply(
  sizes = c(1000, 10000, 1e+05, 1e+06, 1e+07),
  iterations = 10,
  include_transfer = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{sizes}{Vector of sizes to test (default: powers of 10 from 1e3 to 1e7)}

\item{iterations}{Number of iterations for each benchmark (default: 10)}

\item{include_transfer}{If TRUE, includes data transfer time in GPU benchmarks}

\item{verbose}{If TRUE, prints detailed progress information}
}
\value{
A data frame containing benchmark results
}
\description{
This function compares the performance of GPU-accelerated multiplication
operations against their CPU counterparts across different vector sizes.
}
\details{
This function benchmarks the following operations:
- Element-wise vector multiplication (gpu_multiply vs *)
- Scalar multiplication (gpu_scale vs *)  
- Dot product (gpu_dot vs sum(a * b))

The benchmark measures execution time and computes speedup ratios.
Results include both raw timing data and summary statistics.
}
\examples{
\dontrun{
# Basic benchmark
results <- benchmark_gpu_multiply()
print(results)

# Custom benchmark with specific sizes
results <- benchmark_gpu_multiply(
  sizes = c(1e4, 1e5, 1e6),
  iterations = 5
)

# Plot results
library(ggplot2)
ggplot(results, aes(x = size, y = speedup, color = operation)) +
  geom_line() +
  scale_x_log10() +
  labs(title = "GPU Speedup vs Vector Size",
       x = "Vector Size", y = "Speedup Ratio")
}

}
