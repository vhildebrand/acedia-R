% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gpu_multiply.R
\name{gpu_scale}
\alias{gpu_scale}
\title{GPU-accelerated Scalar Multiplication}
\usage{
gpu_scale(x, scalar, force_cpu = FALSE, warn_fallback = TRUE)
}
\arguments{
\item{x}{A numeric vector}

\item{scalar}{A numeric scalar value}

\item{force_cpu}{Logical. If TRUE, forces CPU implementation (for testing/fallback)}

\item{warn_fallback}{Logical. If TRUE, warns when falling back to CPU implementation}
}
\value{
A numeric vector containing \code{x} multiplied by \code{scalar}
}
\description{
Performs scalar multiplication of a numeric vector using CUDA on the GPU.
This function provides a GPU-accelerated alternative for multiplying a vector
by a scalar value.
}
\details{
This function transfers the input vector to GPU memory, performs the scalar
multiplication using a CUDA kernel with parallel threads, and transfers the 
result back to CPU. For small vectors, the CPU version may be faster due to 
memory transfer overhead.

If GPU is not available or GPU operations fail, the function automatically
falls back to CPU computation with an optional warning.
}
\examples{
\dontrun{
# Scale a large vector on GPU
n <- 1e6
x <- runif(n)
scalar <- 3.14
result <- gpu_scale(x, scalar)

# Verify correctness against CPU
all.equal(result, x * scalar)
}

}
